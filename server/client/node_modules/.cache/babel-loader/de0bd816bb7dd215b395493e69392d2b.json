{"ast":null,"code":"import BackEndCall from \"../api/BackEndCall\";\n\nfunction setToken(token) {\n  console.log(\"SETTING TOKEN: \", token);\n\n  if (token) {\n    localStorage.setItem(\"token\", token); // allllllsooooo...add to the auth header\n\n    BackEndCall.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n  } else {\n    localStorage.removeItem(\"token\");\n    BackEndCall.defaults.headers.common[\"Authorization\"] = null;\n  }\n}\n\nfunction getToken() {\n  let token = localStorage.getItem(\"token\");\n  BackEndCall.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n  console.log(\"GETTING TOKEN FROM LOCAL STORAGE AND SETTING HEADERS: \", token);\n\n  if (token) {\n    // Check if expired, remove if it is\n    const payload = JSON.parse(atob(token.split(\".\")[1]));\n    console.log(\"DECODED PAYLOAD: \", payload); // JWT's exp is expressed in seconds, not milliseconds, so convert\n\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem(\"token\");\n      BackEndCall.defaults.headers.common[\"Authorization\"] = null;\n      token = null;\n    }\n  }\n\n  return token;\n}\n\nfunction getUserFromToken() {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split(\".\")[1])).user : null;\n}\n\nexport { setToken, getToken, getUserFromToken };","map":{"version":3,"sources":["/Users/admin/flex-525/projects/Vibez/server/client/src/utils/tokenService.js"],"names":["BackEndCall","setToken","token","console","log","localStorage","setItem","defaults","headers","common","removeItem","getToken","getItem","payload","JSON","parse","atob","split","exp","Date","now","getUserFromToken","user"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,oBAAxB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,KAA/B;;AACA,MAAIA,KAAJ,EAAW;AACPG,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,KAA9B,EADO,CAEP;;AACAF,IAAAA,WAAW,CAACO,QAAZ,CAAqBC,OAArB,CAA6BC,MAA7B,CAAoC,eAApC,IACI,YAAYP,KADhB;AAEH,GALD,MAKO;AACHG,IAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;AACAV,IAAAA,WAAW,CAACO,QAAZ,CAAqBC,OAArB,CAA6BC,MAA7B,CAAoC,eAApC,IAAuD,IAAvD;AACH;AACJ;;AAED,SAASE,QAAT,GAAoB;AAChB,MAAIT,KAAK,GAAGG,YAAY,CAACO,OAAb,CAAqB,OAArB,CAAZ;AACDZ,EAAAA,WAAW,CAACO,QAAZ,CAAqBC,OAArB,CAA6BC,MAA7B,CAAoC,eAApC,IAAuD,YAAYP,KAAnE;AACCC,EAAAA,OAAO,CAACC,GAAR,CACI,wDADJ,EAEIF,KAFJ;;AAIA,MAAIA,KAAJ,EAAW;AACP;AACA,UAAMW,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACd,KAAK,CAACe,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAhB;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCS,OAAjC,EAHO,CAIP;;AACA,QAAIA,OAAO,CAACK,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACjCf,MAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;AACAV,MAAAA,WAAW,CAACO,QAAZ,CAAqBC,OAArB,CAA6BC,MAA7B,CAAoC,eAApC,IAAuD,IAAvD;AACAP,MAAAA,KAAK,GAAG,IAAR;AACH;AACJ;;AACD,SAAOA,KAAP;AACH;;AAED,SAASmB,gBAAT,GAA4B;AACxB,QAAMnB,KAAK,GAAGS,QAAQ,EAAtB;AACA,SAAOT,KAAK,GAAGY,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACd,KAAK,CAACe,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,EAAsCK,IAAzC,GAAgD,IAA5D;AACH;;AACD,SAASrB,QAAT,EAAmBU,QAAnB,EAA6BU,gBAA7B","sourcesContent":["import BackEndCall from \"../api/BackEndCall\";\n\nfunction setToken(token) {\n    console.log(\"SETTING TOKEN: \", token);\n    if (token) {\n        localStorage.setItem(\"token\", token);\n        // allllllsooooo...add to the auth header\n        BackEndCall.defaults.headers.common[\"Authorization\"] =\n            \"Bearer \" + token;\n    } else {\n        localStorage.removeItem(\"token\");\n        BackEndCall.defaults.headers.common[\"Authorization\"] = null;\n    }\n}\n\nfunction getToken() {\n    let token = localStorage.getItem(\"token\");\n   BackEndCall.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n    console.log(\n        \"GETTING TOKEN FROM LOCAL STORAGE AND SETTING HEADERS: \",\n        token\n    );\n    if (token) {\n        // Check if expired, remove if it is\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        console.log(\"DECODED PAYLOAD: \", payload);\n        // JWT's exp is expressed in seconds, not milliseconds, so convert\n        if (payload.exp < Date.now() / 1000) {\n            localStorage.removeItem(\"token\");\n            BackEndCall.defaults.headers.common[\"Authorization\"] = null;\n            token = null;\n        }\n    }\n    return token;\n}\n\nfunction getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split(\".\")[1])).user : null;\n}\nexport { setToken, getToken, getUserFromToken };"]},"metadata":{},"sourceType":"module"}